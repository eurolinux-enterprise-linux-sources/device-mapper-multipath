---
 libmultipath/discovery.c |   25 ++++++++++++++++++++++++-
 1 file changed, 24 insertions(+), 1 deletion(-)

Index: multipath-tools/libmultipath/discovery.c
===================================================================
--- multipath-tools.orig/libmultipath/discovery.c
+++ multipath-tools/libmultipath/discovery.c
@@ -321,9 +321,15 @@ sysfs_set_scsi_tmo (struct multipath *mp
 	int i;
 	char value[11];
 	int rport_id;
-
+	unsigned int current_dev_loss;
+	int delayed_fast_io_fail = 0;
+	
 	if (!mpp->dev_loss && !mpp->fast_io_fail)
 		return 0;
+	if (mpp->dev_loss && mpp->fast_io_fail >= (int)mpp->dev_loss) {
+		condlog(2, "fast_io_fail_tmo (%d) can't be greater than or equal to dev_loss_tmo (%u) .  capping it to %d", mpp->fast_io_fail, mpp->dev_loss, mpp->dev_loss - 1);
+		mpp->fast_io_fail = mpp->dev_loss - 1;
+	}
 	vector_foreach_slot(mpp->paths, pp, i) {
 		rport_id = find_rport_id(pp);
 		if (rport_id < 0) {
@@ -337,9 +343,19 @@ sysfs_set_scsi_tmo (struct multipath *mp
 			condlog(0, "attr_path '/class/fc_remote_ports/rport-%d:%d-%d' too large", pp->sg_id.host_no, pp->sg_id.channel, rport_id);
 			return 1;
 		}
+		if (sysfs_attr_get_value(attr_path, "dev_loss_tmo", value, 11))
+			return 1;
+		if (sscanf(value, "%u\n", &current_dev_loss) != 1)
+			return 1;
+		
 		if (mpp->fast_io_fail){
 			if (mpp->fast_io_fail == -1)
 				sprintf(value, "off");
+			else if (mpp->fast_io_fail >= current_dev_loss) {
+				// We delay setting up the value of fast_io_fail until we have the updated value of dev_loss
+				snprintf(value, 11, "%u", current_dev_loss - 1);
+				delayed_fast_io_fail = 1;
+			 }
 			else
 				snprintf(value, 11, "%u", mpp->fast_io_fail);
 			if (sysfs_attr_set_value(attr_path, "fast_io_fail_tmo",
@@ -353,7 +369,14 @@ sysfs_set_scsi_tmo (struct multipath *mp
  			if (sysfs_attr_set_value(attr_path, "dev_loss_tmo",
 						 value))
 				return 1;
+			if (delayed_fast_io_fail) {
+	                        snprintf(value, 11, "%u", mpp->fast_io_fail);
+        	                if (sysfs_attr_set_value(attr_path, "fast_io_fail_tmo", value))
+                        	        return 1;
+			}
 		}
+		else if (delayed_fast_io_fail)
+			condlog(2, "fast_io_fail_tmo (%d) can't be greater than or equal to dev_loss_tmo (%u) .  capped it to %d", mpp->fast_io_fail, current_dev_loss, current_dev_loss - 1);
 	}
 	return 0;
 }
