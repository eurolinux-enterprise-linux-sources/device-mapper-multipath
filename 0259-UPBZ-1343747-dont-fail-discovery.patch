---
 libmpathpersist/mpath_persist.c |   14 ++++-----
 libmultipath/discovery.c        |   57 ++++++++++++++++++----------------------
 libmultipath/discovery.h        |    4 ++
 multipath/main.c                |    2 -
 multipathd/main.c               |    6 ++--
 5 files changed, 43 insertions(+), 40 deletions(-)

Index: multipath-tools/libmpathpersist/mpath_persist.c
===================================================================
--- multipath-tools.orig/libmpathpersist/mpath_persist.c
+++ multipath-tools/libmpathpersist/mpath_persist.c
@@ -182,7 +182,7 @@ int mpath_persistent_reserve_in (int fd,
 		goto out;
 	}
 
-	if (path_discovery(pathvec, conf, DI_SYSFS | DI_CHECKER)) {
+	if (path_discovery(pathvec, conf, DI_SYSFS | DI_CHECKER) < 0) {
 		ret = MPATH_PR_DMMP_ERROR;
 		goto out1;
 	}
@@ -266,13 +266,13 @@ int mpath_persistent_reserve_out ( int f
 	curmp = vector_alloc ();
 	pathvec = vector_alloc ();
 
-	 if (!curmp || !pathvec){
-                condlog (0, "%s: vector allocation failed.", alias);
-                ret = MPATH_PR_DMMP_ERROR;
-                goto out;
-        }
+	if (!curmp || !pathvec){
+		condlog (0, "%s: vector allocation failed.", alias);
+		ret = MPATH_PR_DMMP_ERROR;
+		goto out;
+	}
 
-	if (path_discovery(pathvec, conf, DI_SYSFS | DI_CHECKER)) {
+	if (path_discovery(pathvec, conf, DI_SYSFS | DI_CHECKER) < 0) {
 		ret = MPATH_PR_DMMP_ERROR;
 		goto out1;
 	}
Index: multipath-tools/libmultipath/discovery.c
===================================================================
--- multipath-tools.orig/libmultipath/discovery.c
+++ multipath-tools/libmultipath/discovery.c
@@ -31,7 +31,7 @@ int
 store_pathinfo (vector pathvec, vector hwtable, char * devname, int flag,
 		struct path **pp_ptr)
 {
-	int err = 1;
+	int err = PATHINFO_FAILED;
 	struct path * pp;
 
 	if (pp_ptr)
@@ -39,7 +39,7 @@ store_pathinfo (vector pathvec, vector h
 	pp = alloc_path();
 
 	if (!pp)
-		return 1;
+		return PATHINFO_FAILED;
 
 	if(safe_sprintf(pp->dev, "%s", devname)) {
 		condlog(0, "pp->dev too small");
@@ -47,15 +47,14 @@ store_pathinfo (vector pathvec, vector h
 	}
 	err = pathinfo(pp, hwtable,
 		       (conf->dry_run == 3)? flag : (flag | DI_BLACKLIST));
-	if (err)
+	if (err != PATHINFO_OK)
 		goto out;
 
-	err = store_path(pathvec, pp);
-	if (err)
-		goto out;
+	if (store_path(pathvec, pp) != 0)
+		err = PATHINFO_FAILED;
 
 out:
-	if (err)
+	if (err != PATHINFO_OK)
 		free_path(pp);
 	else if (pp_ptr)
 		*pp_ptr = pp;
@@ -69,32 +68,28 @@ path_discover (vector pathvec, struct co
 	struct path * pp;
 
 	if (!devname)
-		return 0;
+		return PATHINFO_FAILED;
 
 	if (filter_devnode(conf->blist_devnode, conf->elist_devnode,
 			   devname) > 0)
-		return 0;
+		return PATHINFO_SKIPPED;
 
 	if(safe_sprintf(path, "%s/block/%s/device", sysfs_path,
 			devname)) {
 		condlog(0, "path too small");
-		return 1;
+		return PATHINFO_FAILED;
 	}
 
 	if (strncmp(devname,"cciss",5) && !filepresent(path)) {
 		condlog(4, "path %s not present", path);
-		return 0;
+		return PATHINFO_FAILED;
 	}
 
 	pp = find_path_by_dev(pathvec, devname);
 
-	if (!pp) {
-		if (store_pathinfo(pathvec, conf->hwtable, devname,
-				   flag, NULL) != 1)
-			return 0;
-		else
-			return 1;
-	}
+	if (!pp)
+		return store_pathinfo(pathvec, conf->hwtable, devname,
+				      flag, NULL);
 	return pathinfo(pp, conf->hwtable, flag);
 }
 
@@ -106,10 +101,10 @@ path_discovery (vector pathvec, struct c
 	struct stat statbuf;
 	char devpath[PATH_MAX];
 	char *devptr;
-	int r = 0;
+	int num_paths = 0, total_paths = 0;
 
 	if (!(blkdir = opendir("/sys/block")))
-		return 1;
+		return -ENOENT;
 
 	strcpy(devpath,"/sys/block");
 	while ((blkdev = readdir(blkdir)) != NULL) {
@@ -128,12 +123,14 @@ path_discovery (vector pathvec, struct c
 			continue;
 
 		condlog(4, "Discover device %s", devpath);
-
-		r += path_discover(pathvec, conf, blkdev->d_name, flag);
+		total_paths++;
+		if (path_discover(pathvec, conf, blkdev->d_name, flag) ==
+		    PATHINFO_OK)
+			num_paths++;
 	}
 	closedir(blkdir);
-	condlog(4, "Discovery status %d", r);
-	return r;
+	condlog(4, "Discovered %d/%d paths", num_paths, total_paths);
+	return (total_paths - num_paths);
 }
 
 #define declare_sysfs_get_str(fname) \
@@ -994,7 +991,7 @@ get_state (struct path * pp, int daemon)
 
 	if (!checker_selected(c)) {
 		if (daemon || pp->sysdev == NULL) {
-			if (pathinfo(pp, conf->hwtable, DI_SYSFS) != 0) {
+			if (pathinfo(pp, conf->hwtable, DI_SYSFS) != PATHINFO_OK) {
 				condlog(3, "%s: couldn't get sysfs pathinfo",
 					pp->dev);
 				return PATH_UNCHECKED;
@@ -1113,11 +1110,11 @@ pathinfo (struct path *pp, vector hwtabl
 	 * fetch info available in sysfs
 	 */
 	if (mask & DI_SYSFS && sysfs_pathinfo(pp))
-		return 1;
+		return PATHINFO_FAILED;
 	if (mask & DI_BLACKLIST && mask & DI_SYSFS) {
 		if (filter_device(conf->blist_device, conf->elist_device,
 				  pp->vendor_id, pp->product_id) > 0) {
-			return 2;
+			return PATHINFO_SKIPPED;
 		}
 	}
 
@@ -1155,7 +1152,7 @@ pathinfo (struct path *pp, vector hwtabl
 	if (mask & DI_BLACKLIST && mask & DI_WWID) {
 		if (filter_wwid(conf->blist_wwid, conf->elist_wwid,
 				pp->wwid) > 0) {
-			return 2;
+			return PATHINFO_SKIPPED;
 		}
 	}
 
@@ -1169,7 +1166,7 @@ pathinfo (struct path *pp, vector hwtabl
 			get_uid(pp);
 		get_prio(pp);
 	}
-	return 0;
+	return PATHINFO_OK;
 
 blank:
 	/*
@@ -1178,5 +1175,5 @@ blank:
 	memset(pp->wwid, 0, WWID_SIZE);
 	pp->chkrstate = pp->state = PATH_DOWN;
 
-	return 0;
+	return PATHINFO_OK;
 }
Index: multipath-tools/libmultipath/discovery.h
===================================================================
--- multipath-tools.orig/libmultipath/discovery.h
+++ multipath-tools/libmultipath/discovery.h
@@ -24,6 +24,10 @@
 #define SCSI_COMMAND_TERMINATED 0x22
 #define SG_ERR_DRIVER_SENSE     0x08
 
+#define PATHINFO_OK 0
+#define PATHINFO_FAILED 1
+#define PATHINFO_SKIPPED 2
+
 int sysfs_get_dev (struct sysfs_device * dev, char * buff, size_t len);
 int path_discovery (vector pathvec, struct config * conf, int flag);
 
Index: multipath-tools/multipath/main.c
===================================================================
--- multipath-tools.orig/multipath/main.c
+++ multipath-tools/multipath/main.c
@@ -358,7 +358,7 @@ configure (void)
 		/* maximum info */
 		di_flag = DI_ALL;
 
-	if (path_discovery(pathvec, conf, di_flag))
+	if (path_discovery(pathvec, conf, di_flag) < 0)
 		goto out;
 
 	if (conf->verbosity > 2)
Index: multipath-tools/multipathd/main.c
===================================================================
--- multipath-tools.orig/multipathd/main.c
+++ multipath-tools/multipathd/main.c
@@ -1385,7 +1385,7 @@ configure (struct vectors * vecs, int st
 	struct multipath * mpp;
 	struct path * pp;
 	vector mpvec;
-	int i;
+	int i, ret;
 
 	if (!vecs->pathvec && !(vecs->pathvec = vector_alloc()))
 		return 1;
@@ -1399,7 +1399,9 @@ configure (struct vectors * vecs, int st
 	/*
 	 * probe for current path (from sysfs) and map (from dm) sets
 	 */
-	path_discovery(vecs->pathvec, conf, DI_ALL);
+	ret = path_discovery(vecs->pathvec, conf, DI_ALL);
+	if (ret < 0)
+		return 1;
 
 	vector_foreach_slot (vecs->pathvec, pp, i){
 		if (filter_path(conf, pp) > 0){
