---
 kpartx/devmapper.c |   17 ++++++++++++++---
 kpartx/devmapper.h |    2 +-
 kpartx/kpartx.c    |   24 ++++++++++++++++++++++--
 3 files changed, 37 insertions(+), 6 deletions(-)

Index: multipath-tools/kpartx/devmapper.c
===================================================================
--- multipath-tools.orig/kpartx/devmapper.c
+++ multipath-tools/kpartx/devmapper.c
@@ -129,12 +129,16 @@ dm_addmap (int task, const char *name, c
 }
 
 extern int
-dm_map_present (char * str)
+dm_map_present (char * str, char **uuid)
 {
 	int r = 0;
 	struct dm_task *dmt;
+	const char *uuidtmp;
 	struct dm_info info;
 
+	if (uuid)
+		*uuid = NULL;
+
 	if (!(dmt = dm_task_create(DM_DEVICE_INFO)))
 		return 0;
 
@@ -149,8 +153,15 @@ dm_map_present (char * str)
 	if (!dm_task_get_info(dmt, &info))
 		goto out;
 
-	if (info.exists)
-		r = 1;
+	if (!info.exists)
+		goto out;
+
+	r = 1;
+	if (uuid) {
+		uuidtmp = dm_task_get_uuid(dmt);
+		if (uuidtmp && strlen(uuidtmp))
+			*uuid = strdup(uuidtmp);
+	}
 out:
 	dm_task_destroy(dmt);
 	return r;
Index: multipath-tools/kpartx/devmapper.h
===================================================================
--- multipath-tools.orig/kpartx/devmapper.h
+++ multipath-tools/kpartx/devmapper.h
@@ -6,7 +6,7 @@ int dm_prereq (char *, int, int, int);
 int dm_simplecmd (int, const char *, int, uint32_t *);
 int dm_addmap (int, const char *, const char *, const char *, uint64_t,
 	       const char *, int, mode_t, uid_t, gid_t, uint32_t *);
-int dm_map_present (char *);
+int dm_map_present (char *, char **);
 char * dm_mapname(int major, int minor);
 dev_t dm_get_first_dep(char *devname);
 char * dm_mapuuid(int major, int minor);
Index: multipath-tools/kpartx/kpartx.c
===================================================================
--- multipath-tools.orig/kpartx/kpartx.c
+++ multipath-tools/kpartx/kpartx.c
@@ -409,7 +409,8 @@ main(int argc, char **argv){
 				}
 				strip_slash(partname);
 
-				if (!slices[j].size || !dm_map_present(partname))
+				if (!slices[j].size ||
+				    !dm_map_present(partname, NULL))
 					continue;
 
 				if (!dm_simplecmd(DM_DEVICE_REMOVE, partname,
@@ -434,6 +435,8 @@ main(int argc, char **argv){
 
 		case ADD:
 			for (j = 0; j < n; j++) {
+				char *full_uuid;
+
 				if (slices[j].size == 0)
 					continue;
 
@@ -450,9 +453,24 @@ main(int argc, char **argv){
 					exit(1);
 				}
 
-				op = (dm_map_present(partname) ?
+				op = (dm_map_present(partname, &full_uuid) ?
 					DM_DEVICE_RELOAD : DM_DEVICE_CREATE);
 
+				if (full_uuid) {
+					char *map_uuid = strchr(full_uuid, '-');
+					if (!map_uuid || strncmp(full_uuid, "part", 4) != 0) {
+						fprintf(stderr, "%s is already in use, and not a kpartx partition\n", partname);
+						r++;
+						continue;
+					}
+					map_uuid++;
+					if (strcmp(uuid, map_uuid) != 0) {
+						fprintf(stderr, "%s is already in use, and is a partition of a different device\n", partname);
+						r++;
+						continue;
+					}
+				}
+
 				if (!dm_addmap(op, partname, DM_TARGET, params,
 					       slices[j].size, uuid, j+1,
 					       buf.st_mode & 0777, buf.st_uid,
@@ -460,6 +478,7 @@ main(int argc, char **argv){
 					fprintf(stderr, "create/reload failed on %s\n",
 						partname);
 					r++;
+					continue;
 				}
 				if (op == DM_DEVICE_RELOAD &&
 				    !dm_simplecmd(DM_DEVICE_RESUME, partname,
@@ -467,6 +486,7 @@ main(int argc, char **argv){
 					fprintf(stderr, "resume failed on %s\n",
 						partname);
 					r++;
+					continue;
 				}
 				dm_devn(partname, &slices[j].major,
 					&slices[j].minor);
